<?php

namespace OC\PlatformBundle\Repository;

use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends \Doctrine\ORM\EntityRepository
{
    public function getAdverts($page, $nbPerPage)
    {
        $query = $this->createQueryBuilder('a')
                      ->leftJoin('a.image', 'i')
                      ->addSelect('i')
                      ->leftJoin('a.categories', 'c')
                      ->addSelect('c')
                      ->orderBy('a.date', 'DESC')
                      ->setFirstResult(($page - 1) * $nbPerPage)
                      ->setMaxResults($nbPerPage)
                      ->getQuery();

        // return $query->getResult();
        return new Paginator($query, true); // use namespace
    }

    public function getAdvertsWithSkill()
    {
        $query = $this->createQueryBuilder('a')
                      ->leftJoin('a.image', 'i')
                      ->addSelect('i')
                      ->leftJoin('a.categories', 'c')
                      ->addSelect('c')
                      ->leftJoin('a.advertSkills', 'ask')
                      ->addSelect('ask')
                      ->orderBy('a.date', 'DESC')
                      ->getQuery();

        return $query->getResult();
    }


    /* ***************************************************** */

    public function myFindAll()
    {
        return $this
            ->createQueryBuilder('a')
            ->getQuery()
            ->getResult();
    }

    public function myFindOne($id)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->where('a.id = :id')
           ->setParameter('id', $id);
        
        return $qb->getQuery()
                  ->getResult();
    }

    public function findByAuthorAndDate($author, $year)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->where('a.author = :author')
            ->setParameter('author', $author)
            ->andWhere('a.date < :year')
            ->setParameter('year', $year)
            ->orderBy('a.date', 'DESC');

        return $qb
            ->getQuery()
            ->getResult();
    }

    public function whereCurrentYear(QueryBuilder $qb)
    {
        $qb->andWhere('a.date BETWEEN :start AND :end')
            ->setParameter('start', new \Datetime(date('Y').'-01-01'))
            ->setParameter('end',   new \Datetime(date('Y').'-12-31'));  
    }

    public function myFind()
    {
        $qb = $this->createQueryBuilder('a');
        $qb->where('a.author = :author')
           ->setParameter('author', 'Marine');

        // On applique notre condition sur le QueryBuilder
        $this->whereCurrentYear($qb);
        $qb->orderBy('a.date', 'DESC');

        return $qb->getQuery()
                  ->getResult();
    }


    public function myFindAllDQL()
    {
        $query = $this->_em->createQuery('SELECT a FROM OCPlatformBundle:Advert a');
        $results = $query->getResult();

        return $results;
    }

    public function myFindDQL($id)
    {
        $query = $this->_em->createQuery('SELECT a FROM OCPlatformBundle:Advert a WHERE a.id = :id');
        $query->setParameter('id', $id);
    
        // Utilisation de getSingleResult car la requête ne doit retourner qu'un seul résultat
        return $query->getSingleResult();
    }

    /* --------- Les Jointures Dans nôs Requêtes ------------- */

    public function getAdvertWithApplications()
    {
        $qb = $this->createQueryBuilder('a')
                   ->leftJoin('a.applications', 'app')
                   ->addSelect('app');

        return $qb->getQuery()->getResult();
    }

    public function getAdvertWithCategories(array $categoryNames)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->innerJoin('a.categories', 'c')
           ->addSelect('c');

        // Puis on filtre sur le nom des catégories à l'aide d'un IN
        $qb->where($qb->expr()->in('c.name', $categoryNames));
        
        // Enfin, on retourne le résultat
        return $qb->getQuery()->getResult();
    }

}
